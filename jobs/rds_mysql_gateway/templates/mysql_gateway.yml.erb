---
<%
service = "rds_mysql"
gateway = eval("properties.#{service}_gateway")
plan_mgmt = properties.service_plans.send(service.to_sym)
supported_plans = properties.supported_plans
if supported_plans
  plan_mgmt.instance_eval("def fields; @table.keys.select { |v| #{supported_plans}.include? v.to_s }; end;") if plan_mgmt
else
  plan_mgmt.instance_eval("def fields; @table.keys; end;") if plan_mgmt
end
nats_props_name = properties.nats_props || "nats"
nats_props = properties.send(nats_props_name)
nats = "nats://#{nats_props.user}:#{nats_props.password}@#{nats_props.address}:#{nats_props.port}"
lifecycle = properties.service_lifecycle
cc_api_version = gateway.cc_api_version || "v1"
%>
index: <%= spec.index %>
mbus: <%= nats %>
port: 33884
cloud_controller_uri: <%= properties.cc.srv_api_uri %>

service:
  name: 'rds-mysql'
  unique_id: '17523a3a-44fe-4c59-a962-af6cd06e0f92'
  version: 'n/a'
  description: 'RDS MySQL by Amazon'
  provider: aws
  provider_name: 'AWS'
  logo_url: 'https://s3.amazonaws.com/cf-core-service-assets/mysql_aws_rds.png'
  blurb: 'Amazon MySQL Relational Database Service'
  plans:
  <% for plan in plan_mgmt.fields.each %>
    <% plan_info = plan_mgmt.send(plan.to_sym) %>
    <% plan_description = plan_info.description || "#{plan} plan" %>
    <% plan_free_flag   = plan_info.free %>
    <% extra            = plan_info.extra %>
    <% unique_id        = plan_info.unique_id %>
    <%= "'#{plan}':" %>
      unique_id: <%= "'#{unique_id}'" %>
      description: <%= "'#{plan_description}'" %>
      free: <%= !plan_free_flag.nil? && plan_free_flag.to_s || "true" %>
      extra: <%= "'#{extra}'" %>
  <% end %>
  default_plan: '<%= gateway.default_plan || 'free' %>'
  cf_plan_id:
<% if plan_mgmt %>
<% plan_mgmt.fields.each do |pf| %>
    <%= "'#{pf}': #{plan_mgmt.send(pf).configuration.cf_plan_id}" %>
<% end %>
<% end %>
  tags: ['relational']
  timeout: <%= properties.rds_mysql_gateway.service_timeout || 10 %>
  version_aliases: {}

<% if gateway.ip_route %>
ip_route: <%= gateway.ip_route %>
<% end %>

cc_api_version: <%= cc_api_version %>

gateway_name: "RDS Mysql Gateway"
uaa_client_id: <%= properties.uaa_client_id || "vmc" %>
uaa_endpoint: <%= properties.uaa_endpoint %>
uaa_client_auth_credentials:
  username: <%= properties.uaa_client_auth_credentials.username %>
  password: "<%= properties.uaa_client_auth_credentials.password %>"
service_auth_tokens:
  rds-mysql_aws: "<%= gateway.token %>"

token: "<%= gateway.token %>"
logging:
  file: /var/vcap/sys/log/rds_mysql_gateway/mysql_gateway.log
  level: debug
  <% if properties.syslog_aggregator %>
  syslog: vcap.rds_mysql_gateway
  <% end %>


node_timeout: <%= gateway.node_timeout || 8 %>

pid: /var/vcap/sys/run/rds_mysql_gateway/mysql_gateway.pid
z_interval: <%= gateway.z_interval || 30 %>
check_orphan_interval: <%= gateway.check_orphan_interval || -1 %>
double_check_orphan_interval: <%= gateway.double_check_orphan_interval || 300 %>
max_nats_payload: <%= nats_props.max_payload || 1048576 %>
plan_management:
  plans:
<% plan_mgmt.fields.each do |pf| %>
    '<%= pf %>':
      high_water: <%= plan_mgmt.send(pf).job_management.high_water %>
      low_water: <%= plan_mgmt.send(pf).job_management.low_water %>
      allow_over_provisioning: <%= plan_mgmt.send(pf).configuration.allow_over_provisioning || "false" %>
    <% opts = plan_mgmt.send(pf).configuration.lifecycle %>
    <% if opts && opts.enable == true %>
      lifecycle:
        serialization: <%= opts.serialization || "disable" %>
      <% if opts.snapshot %>
        snapshot:
          quota: <%= opts.snapshot.quota || 0 %>
      <% end %>
      <% if opts.serialization || opts.snapshot %>
        job: enable
      <% end %>
    <% end %>
<% end %>
